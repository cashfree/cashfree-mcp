{
  "openapi": "3.0.0",
  "info": {
    "title": "Payouts",
    "version": "3.0.0"
  },
  "servers": [
    {
      "url": "https://payout-api.cashfree.com"
    }
  ],
  "security": [
    {}
  ],
  "paths": {
    "/payout/v1/addBeneficiary": {
      "post": {
        "summary": "Add Beneficiary",
        "description": "Use this API to add a beneficiary to your Cashfree account by providing the bank account number, IFSC, and other required details. Before you request a transfer, ensure the account has been successfully added as a beneficiary.",
        "operationId": "create-beneficiary-11",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_addBeneficiary_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "409": {
            "description": "409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_409"
                }
              }
            }
          },
          "412": {
            "description": "412",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_412"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/addBeneficiary' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\": \"JOHN18011343\",\n  \"name\": \"john doe\",\n  \"email\": \"johndoe@cashfree.com\",\n  \"phone\": \"9876543210\",\n  \"bankAccount\": \"00111122233\",\n  \"ifsc\": \"HDFC0000001\",\n  \"address1\": \"ABC Street\",\n  \"city\": \"Bangalore\",\n  \"state\": \"Karnataka\",\n  \"pincode\": \"560001\"\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Beneficiary} = cfSdk.Payouts;\n\nconst response = await Beneficiary.Add({\n            \"beneId\": \"JOHN180127\", \n            \"name\": \"john doe\",\n            \"email\": \"johndoe@cashfree.com\", \n            \"phone\": \"9876543210\",\n            \"bankAccount\": \"00011020001773\",  \n            \"address1\" : \"ABC Street\", \n            \"city\": \"Bangalore\", \n            \"state\":\"Karnataka\", \n            \"pincode\": \"560001\"\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Beneficiary;\nimport com.cashfree.lib.domains.BeneficiaryDetails;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nBeneficiary beneficiary = new Beneficiary(payouts);\n\nBeneficiaryDetails beneficiaryDetails = new BeneficiaryDetails()\n        .setBeneId(\"JOHN18012\")\n        .setName(\"john doe\")\n        .setEmail(\"johndoe@cashfree.com\")\n        .setPhone(\"9876543210\")\n        .setBankAccount(\"00001111222233\")\n        .setIfsc(\"HDFC0000001\")\n        .setAddress1(\"ABC Street\")\n        .setCity(\"Bangalore\")\n        .setState(\"Karnataka\")\n        .setPincode(\"560001\");\n\nbeneficiary.addBeneficiary(beneficiaryDetails);\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.beneficiary import Beneficiary\n\nbene_add = Benefeciary.add(beneId=\"JOHN18012\", name=\"john doe\", email=\"johndoe@cashfree.com\", phone=\"9876543210\", address1=\"ABC Street\", bankAccount=\"00001111222233\", ifsc=\"HDFC0000001\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/getBalance": {
      "get": {
        "summary": "Get Balance",
        "description": "Use this API to get the ledger balance and available balance of your account. Available balance is ledger balance minus the sum of all pending transfers (transfers triggered and processing or pending now).",
        "operationId": "get-balance1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "Result": {
                    "value": {}
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  https://{{Host%20Url}}payout/v1/getBalance \\\n  -H 'Authorization: Bearer {{Token}}\\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst response = await cfSdk.Payouts.GetBalance();",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\npayouts.getBalance();\n\n}\n"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts.transfers import Transfers\nb = Transfers.get_balance() "
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/internalTransfer": {
      "post": {
        "summary": "Internal Transfer",
        "description": "Use this API to request an internal transfer at Cashfree. The internal transfer API is useful for multiple Payouts accounts. The API response will either result in an ERROR or SUCCESS response.",
        "operationId": "internal-transfer1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_internalTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_18"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/internalTransfer' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{Token}}\\\n  -d '{\n\t\"amount\": 1.1,\n\t\"rechargeAccount\": \"492372992\"\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst response = await cfSdk.Payouts.InternalTransfer({\n    amount: 1.1,\n    rechargeAccount: \"492372992\"\n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\n\npayouts.internalTransfer();\n\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts.transfers import Transfers\ntransfer = Transfers.internal_transfer(amount=1.1, rechargeAccuont=\"492372992\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/selfWithdrawal": {
      "post": {
        "summary": "Self Withdrawal",
        "description": "Use this API to request a self withdrawal at Cashfree. Self withdrawal is allowed a maximum of 3 times a day. The API response will either result in an ERROR or SUCCESS response. The status of the withdrawal request is available on the dashboard.",
        "operationId": "self-withdrawal1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_selfWithdrawal_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "Result": {
                    "value": {}
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/selfWithdrawal' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{Token}}\\\n  -d '{\n\t\"withdrawlId\": \"1\",\n\t\"amount\": 2\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst response = await cfSdk.Payouts.SelfWithdrawal({\n    withdrawalId: \"testWithdrawal1\"\n    amount: \"1.00\"\n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\n\npublic static void main()\n{\n  Payouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\n  payouts.init();\n  //self withdrawal is under construction\n  payouts.selfWitdrawal();\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts.transfers import Transfers\nwithd = Transfers.self_withdrawal(withdrawalId=\"withdraw1\", amount=1.1, remarks=\"withdrawal request\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/getBeneId": {
      "get": {
        "summary": "Get Beneficiary ID",
        "description": "Use this API to get the beneficiary ID by providing the bank account number and ifsc.",
        "operationId": "getbeneficiary-id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankAccount",
            "in": "query",
            "description": "Beneficiaries bank account number, alphanumeric ( >=6 and <= 40 characters).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ifsc",
            "in": "query",
            "description": "Beneficiaries bank's IFSC code (standard IFSC format) - length 11, first four IFSC and 5th character must be 0.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/getBeneId?bankAccount=00111122233&ifsc=HDFC0000001' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Beneficiary} = cfSdk.Payouts;\n\nconst response = await Beneficiary.GetBeneId({\n    bankAccount: \"00001111222233\"\n    ifsc: \"HDFC000001\"\n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Beneficiary;\nimport com.cashfree.lib.domains.BeneficiaryDetails;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nBeneficiary beneficiary = new Beneficiary(payouts);\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.beneficiary import Beneficiary\n\nbene_id = Benefeciary.get_bene_id(\"00001111222233\", \"HDFC0000001\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/removeBeneficiary": {
      "post": {
        "summary": "Remove Beneficiary",
        "description": "Use this API to remove an existing beneficiary from a list of added beneficiaries.",
        "operationId": "remove-beneficiary1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_removeBeneficiary_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "Result": {
                    "value": {}
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/removeBeneficiary' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\" : \"JOHN18011\"\n} '"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Beneficiary} = cfSdk.Payouts;\n\nconst response = await Beneficiary.Remove({\n    beneId: \"JOHN18011\",\n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Beneficiary;\nimport com.cashfree.lib.domains.BeneficiaryDetails;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nBeneficiary beneficiary = new Beneficiary(payouts);\nbeneficiary.removeBeneficiary(\"JOHN18012\")\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.beneficiary import Benefeciary\n\nremove_bene = Benefeciary.remove_bene(\"JOHN18011\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/getBeneficiary/{beneId}": {
      "get": {
        "summary": "Get Beneficiary Details",
        "description": "Use this API to get the details of a particular beneficiary in your account.",
        "operationId": "getbeneficiary-details",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneId",
            "in": "path",
            "description": "Unique Beneficiary ID of the beneficiary for which you want to view the details.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_2"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/getBeneficiary/JOHN18011' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Beneficiary} = cfSdk.Payouts;\n\nconst response = await Beneficiary.GetDetails({\n            \"beneId\": \"JOHN18011\",\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Beneficiary;\nimport com.cashfree.lib.domains.BeneficiaryDetails;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nBeneficiary beneficiary = new Beneficiary(payouts);\nbeneficiary.getBeneficiaryDetails(\"JOHN18011\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.beneficiary import Beneficiary\n\nbene_details = Benefeciary.get_bene_details(\"JOHN18011\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/requestAsyncTransfer": {
      "post": {
        "summary": "Standard Transfer Async",
        "description": "Use this API to initiate an amount transfer request at Cashfree by providing beneficiary id, amount, and transfer id. This is an async transfer request.",
        "operationId": "standard-transfer-async1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_requestAsyncTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_6"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_2"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/requestAsyncTransfer' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\": \"JOHN18011343\",\n  \"amount\": \"1.00\",\n  \"transferId\": \"JUNOB2018\"\n}'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/beneHistory": {
      "get": {
        "summary": "Get Beneficiary History",
        "description": "Use this API to fetch the transaction history for a particular beneficiary and for a desired period of time.",
        "operationId": "getbeneficiary-history",
        "parameters": [
          {
            "name": "beneId",
            "in": "query",
            "description": "The beneficiary id that you have created. Alphanumeric characters accepted.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date for the desired period. Format - yyyy-mm-dd",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date for the desired period. Format -  yyyy-mm-dd. If start date is provided,  end date is a mandatory. End date has to be a day less than current date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of transactions to be displayed on the page. Maximum = 25. Default value set is 25.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Will show the latest transfers on the first page. Minimum = 1. Default value set is 1.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_7"
                },
                "examples": {
                  "Result": {
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Data retrieved successfully",
                      "data": {
                        "transfers": [
                          {
                            "transferDate": "2020-06-16T00:00:00.000Z",
                            "amount": "1",
                            "mode": "IMPS",
                            "beneId": "John Doe",
                            "status": "SUCCESS"
                          },
                          {
                            "transferDate": "2020-05-28T00:00:00.000Z",
                            "amount": "1",
                            "mode": "NEFT",
                            "beneId": "John Doe",
                            "status": "SUCCESS"
                          },
                          {
                            "transferDate": "2020-05-15T00:00:00.000Z",
                            "amount": "1.1",
                            "mode": "IMPS",
                            "beneId": "John Doe",
                            "status": "SUCCESS"
                          },
                          {
                            "transferDate": "2020-05-15T00:00:00.000Z",
                            "amount": "1.1",
                            "mode": "IMPS",
                            "beneId": "John Doe",
                            "status": "SUCCESS"
                          },
                          {
                            "transferDate": "2020-05-15T00:00:00.000Z",
                            "amount": "1",
                            "mode": "IMPS",
                            "beneId": "John Doe",
                            "status": "SUCCESS"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_3"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request GET 'https://payout-api.cashfree.com//payout/v1/beneHistory?beneId=VENKY_UPI&startDate=2021-05-27&endDate=2021-05-31&perPage=10&page=1' \\\n--header 'Authorization: Bearer  <token>'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.1/getTransferStatus": {
      "get": {
        "summary": "Get Transfer Status",
        "description": "Use these details to get details of a particular transfer. You can pass referenceId or transferId to fetch the details.",
        "operationId": "get-transfer-status1",
        "parameters": [
          {
            "name": "referenceId",
            "in": "query",
            "description": "Reference ID of the transaction. (Either referenceId or transferId is mandatory)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferId",
            "in": "query",
            "description": "Transfer ID of the transaction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_19"
                },
                "examples": {
                  "Case1": {
                    "summary": "Transfer is successful",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 200223467",
                      "data": {
                        "transfer": {
                          "transferId": "sample01139",
                          "bankAccount": "000810139000385",
                          "ifsc": "YESB0MAN001",
                          "beneId": "test_bene",
                          "amount": "1.2",
                          "status": "SUCCESS",
                          "utr": "N351200478962883",
                          "addedOn": "2020-12-16T09:17:41.000Z",
                          "processedOn": "2020-12-16T09:17:42.000Z",
                          "transferMode": "BANK",
                          "acknowledged": 1
                        }
                      }
                    }
                  },
                  "Case2": {
                    "summary": "Transfer is not successful",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 195460327",
                      "data": {
                        "transfer": {
                          "transferId": "1025fca380442d98",
                          "bankAccount": 20274048860,
                          "ifsc": "SBIN0002207",
                          "beneId": "TEST1234",
                          "amount": "1.1",
                          "status": "FAILED",
                          "addedOn": "2020-12-04T18:52:12.000Z",
                          "processedOn": "2020-12-04T19:07:13.000Z",
                          "reason": "BENEFICIARY_BANK_OFFLINE",
                          "transferMode": "BANK",
                          "acknowledged": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_3"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request GET 'http://localhost:9188/payout/v1/getTransferStatus?transferId=Sample_test' \\\n--header 'Authorization: Bearer {{Token}}' \\\n--header 'Content-Type: application/json'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/requestTransfer": {
      "post": {
        "summary": "Standard Transfer Sync",
        "description": "Use this API to initiate an amount transfer request at Cashfree by providing beneficiary id, amount, and transfer id. This is a sync transfer request.",
        "operationId": "standard-transfer-sync1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Auth Token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_requestTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Transfer completed successfully": {
                    "summary": "Transfer Success",
                    "value": {
                      "status": "SUCCESS,",
                      "subCode": "200,",
                      "message": "Transfer completed successfully,",
                      "data": {
                        "referenceId": "10023,",
                        "utr": "P16111765023806,",
                        "acknowledged": 1
                      }
                    }
                  },
                  "Beneficiary does not exist": {
                    "summary": "Beneficiary does not exist",
                    "value": {
                      "status": "ERROR,",
                      "subCode": "404,",
                      "message": "Beneficiary does not exist"
                    }
                  },
                  "Remarks can have only numbers, alphabets, and whitespaces": {
                    "summary": "Remarks Format",
                    "value": {
                      "status": "ERROR,",
                      "subCode": "422,",
                      "message": "Remarks can have only numbers, alphabets, and whitespaces"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/requestTransfer' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\": \"JOHN18011\",\n  \"amount\": \"1.00\",\n  \"transferId\": \"JUNOB2018\"\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Transfers} = cfSdk.Payouts;\n\nconst response = await Transfers.RequestTransfer({\n            \"beneId\": \"JOHN18011\",\n            \"transferId\": \"tranfer001234\",\n            \"amount\": \"1.00\",\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Transfers;\nimport com.cashfree.lib.domains.request.BatchTransferRequest;\nimport com.cashfree.lib.domains.request.RequestTransferRequest;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nTransfers transfer = new Transfers(payouts);\n\nRequestTransferRequest request = new RequestTransferRequest()\n        .setBeneId(\"JOHN18011\")\n        .setAmount(new BigDecimal(\"1.00\"))\n        .setTransferId(\"javasdktestJAN2019\");\ntransfers.requestTransfer(request);\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.transfers import Transfers\n\ntnx_req = Transfers.request_transfer(beneId=\"JOHN18011\", amount=\"100.1\", transferId=\"DEC2017\", transferMode=\"banktransfer\", remarks=\"Test transfer\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/createCashgram": {
      "post": {
        "summary": "Create Cashgram",
        "description": "Use this API to create a Cashgram.",
        "operationId": "create-cashgram1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_createCashgram_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "409": {
            "description": "409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_409_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/createCashgram' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{Token}}'\n  -d '{\n            \"cashgramId\": \"JOHaN10\",\n            \"amount\": \"1.00\",\n            \"name\": \"John Doe\",\n            \"email\": \"johndoe@cashfree.com\",\n            \"phone\": \"9876543210\",\n            \"linkExpiry\": \"2020/04/01\",\n            \"remarks\": \"sample cashgram\",\n            \"notifyCustomer\": 1\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Cashgram} = cfSdk.Payouts;\n\nconst response = await Cashgram.CreateCashgram({\n            cashgramId: \"JOHaN10\",\n            amount: \"1.00\",\n            name: \"John Doe\",\n            email: \"johndoe@cashfree.com\",\n            phone: \"9876543210\",\n            linkExpiry: \"2020/04/01\",\n            remarks: \"sample cashgram\",\n            notifyCustomer: 1\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Cashgram;\nimport com.cashfree.lib.domains.CashgramDetails\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nCashgram cashgram = new Cashgram(payouts);\n\nCashgramDetails cashgramDetails = new CashgramDetails()\n        .setCashgramId(\"JOHaN10\")\n        .setAmount(new BigDecimal(\"1.00\"))\n        .setName(\"John Doe\")\n        .setEmail(\"johndoe@cashfree.com\")\n        .setPhone(\"9876543210\")\n        .setLinkExpiry(LocalDateTime.now().plusMinutes(0))\n        .setRemarks(\"sample cashgram\")\n        .setNotifyCustomer(1);\ncashgram.createCashgram(cashgramDetails);\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.cashgram import Cashgram\nc = Cashgram.create_cashgram(cashgramId=\"JOHaN10\", amount=\"1.1\", name=\"john doe\", email=\"johndoe@cashfree.com\", phone=\"9876543210\", \nlinkExpiry=\"2020/04/01\", remarks=\"sample cashgram\", notifyCustomer=1)  "
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/requestBatchTransfer": {
      "post": {
        "summary": "Batch Transfer",
        "description": "Use this API to create multiple transfers to multiple beneficiaries. This API accepts an array of transfer objects under the batch field.",
        "operationId": "batch-transfer1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_requestBatchTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "text/plain": {
                "examples": {
                  "Result": {
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Request accepted",
                      "data": {
                        "referenceId": 1594
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "409": {
            "description": "409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_409_2"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_4"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request POST 'https://payout-api.cashfree.com//payout/v1/requestBatchTransfer' \\\n--header 'Authorization: Bearer <token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"batchTransferId\": \"abc-.12356\",\n    \"batchFormat\": \"BANK_ACCOUNT\",\n    \"batch\": [\n        {\n            \"amount\": \"1\",\n            \"transferId\": \"1234\",\n            \"remarks\": \"Transfer with Id 12356\",\n            \"name\": \"john doe\",\n            \"email\": \"johndoe@cashfree.com\",\n            \"phone\": 9876543210,\n            \"bankAccount\": \"00111122233\",\n            \"ifsc\": \"HDFC0000001\"\n        }\n    ]\n}'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/deactivateCashgram": {
      "post": {
        "summary": "Deactivate Cashgram",
        "description": "",
        "operationId": "deactivate-cashgram1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_deactivateCashgram_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_4"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/deactivateCashgram?cashgramId=JOHaN10' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{Token}}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Cashgram} = cfSdk.Payouts;\nconst response = await Cashgram.DeactivateCashgram({\n            cashgramId: \"JOHaN10\"\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Cashgram;\nimport com.cashfree.lib.domains.CashgramDetails\nPayouts payouts = Payouts.getInstance {\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nCashgram cashgram = new Cashgram(payouts);\ncashgram.deactivateCashgram(\"JOHaN10\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.cashgram import Cashgram\nstatus = Cashgram.deactivate_cashgram(cashgramId=\"JOHaN10\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/authorize": {
      "post": {
        "summary": "Authorize",
        "description": "Use this API to authenticate with the Cashfree system and obtain the authorization bearer token. All other API calls must have this token as Authorization header in the format 'Bearer &lt;token&gt;' (without quotes) for them to get processed. The generated token is valid for 6 minutes.",
        "operationId": "authorize-2",
        "parameters": [
          {
            "name": "X-Cf-Signature",
            "in": "header",
            "description": "Signature to be sent if IP is not whitelisted",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Secret",
            "in": "header",
            "description": "Client Secret key",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Client-Id",
            "in": "header",
            "description": "Client ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "401": {
            "description": "401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_401"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/authorize' \\\n  -H 'X-Client-Id: {{client id}}' \\\n  -H 'X-Client-Secret: {{client secret}}' \\"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/getCashgramStatus": {
      "get": {
        "summary": "Get Cashgram Status",
        "description": "Use this API to get the status of the Cashgram created.",
        "operationId": "get-cashgram-status1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cashgramId",
            "in": "query",
            "description": "ID of the Cashgram",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_11"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_4"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/getCashgramStatus?cashgramId=JOHaN10' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer {{Token}}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Cashgram} = cfSdk.Payouts;\n\nconst response = await Cashgram.GetCashgramStatus({\n            cashgramId: \"JOHaN10\"\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Cashgram;\nimport com.cashfree.lib.domains.CashgramDetails\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nCashgram cashgram = new Cashgram(payouts);\ncashgram.getCashgramStatus(\"JOHaN10\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.cashgram import Cashgram\nstatus = Cashgram.get_cashgram_status(cashgramId=\"JOHaN10\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/verifyToke": {
      "post": {
        "summary": "Verify",
        "description": "Use this API to verify the bearer token generated. If the token does not exist/invalid/expired, the response \"Token is not valid\" is returned. Regenerate token in case of token expiry to make API calls (use /payout/v1/authorize for this).",
        "operationId": "verify11",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token to be verified",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "text",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/verifyToken' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            }
          ],
          "samples-languages": [
            "text"
          ]
        }
      }
    },
    "/payout/v1/verifyToken": {
      "post": {
        "summary": "Verify",
        "description": "Verify the bearer token generated. If the token does not exist, is invalid, or has expired, the response \"Token is not valid\" is returned. Regenerate token in case of token expiry for making API calls ( use /payout/v1/authorize for this).",
        "operationId": "verify-1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token to be verified",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1/verifyToken' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/directTransfer": {
      "post": {
        "summary": "Direct Transfer",
        "description": "Use this API to initiate amount transfers directly to the beneficiary account via a bank transfer or UPI. You can add the beneficiary details in the same API request.",
        "operationId": "direct-transfer1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_directTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                },
                "examples": {
                  "Case1Pending": {
                    "summary": "Pending Transfer",
                    "value": {
                      "status": "PENDING",
                      "subCode": "201",
                      "message": "Transfer request pending at the bank",
                      "data": {
                        "referenceId": "23457526",
                        "utr": "",
                        "acknowledged": 0
                      }
                    }
                  },
                  "Case2Success": {
                    "summary": "Successful Transfer",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Transfer completed successfully",
                      "data": {
                        "referenceId": "10023",
                        "utr": "P16111765023806",
                        "acknowledged": 1
                      }
                    }
                  },
                  "Case3Error": {
                    "summary": "Error in Transfer",
                    "value": {
                      "status": "ERROR",
                      "subCode": "400",
                      "message": "Transfer Id already exists"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "{\n \"amount\": \"3.00\",\n \"transferId\": \"JUNOB2018142\",\n \"transferMode\": \"banktransfer\",\n \"remarks\": \"test\",\n \"beneDetails\" : {\n     \"bankAccount\": \"026291800001191\",\n     \"ifsc\": \"YESB0000262\",\n     \"name\": \"Ranjiths\",\n     \"email\": \"ranjiths@cashfree.com\",\n     \"phone\": \"9999999999\",\n     \"address1\": \"any_dummy_value\"\n }\n}"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/requestTransfer": {
      "post": {
        "summary": "Standard Transfer Sync v1.2",
        "description": "Use this API to initiate an amount transfer request at Cashfree by providing beneficiary id, amount, and transfer id. This is a sync transfer request.",
        "operationId": "standard-transfer-sync-v-1-21",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Auth Token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_2_requestTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with status and data or error information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_21"
                },
                "examples": {
                  "SuccessExample": {
                    "summary": "Successful Transfer",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Transfer completed successfully",
                      "data": {
                        "referenceId": "10023",
                        "utr": "P16111765023806",
                        "acknowledged": 1
                      }
                    }
                  },
                  "ErrorNotFound": {
                    "summary": "Beneficiary Not Found",
                    "value": {
                      "status": "ERROR",
                      "subCode": "404",
                      "message": "Beneficiary does not exist"
                    }
                  },
                  "ErrorInvalidRemarks": {
                    "summary": "Invalid Remarks",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Remarks can have only numbers, alphabets, and whitespaces"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1.2/requestTransfer' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\": \"JOHN18011\",\n  \"amount\": \"1.00\",\n  \"transferId\": \"JUNOB2018\"\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Transfers} = cfSdk.Payouts;\n\nconst response = await Transfers.RequestTransfer({\n            \"beneId\": \"JOHN18011\",\n            \"transferId\": \"tranfer001234\",\n            \"amount\": \"1.00\",\n        });",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Transfers;\nimport com.cashfree.lib.domains.request.BatchTransferRequest;\nimport com.cashfree.lib.domains.request.RequestTransferRequest;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nTransfers transfer = new Transfers(payouts);\n\nRequestTransferRequest request = new RequestTransferRequest()\n        .setBeneId(\"JOHN18011\")\n        .setAmount(new BigDecimal(\"1.00\"))\n        .setTransferId(\"javasdktestJAN2019\");\ntransfers.requestTransfer(request);\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.transfers import Transfers\n\ntnx_req = Transfers.request_transfer(beneId=\"JOHN18011\", amount=\"100.1\", transferId=\"DEC2017\", transferMode=\"banktransfer\", remarks=\"Test transfer\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1.2/getBatchTransferStatus": {
      "get": {
        "summary": "Get Batch Transfer Status V1.2",
        "description": "Use this API to get the status of the Batch Transfer.",
        "operationId": "get-batch-transfer-status-v1-21",
        "parameters": [
          {
            "name": "batchTransferId",
            "in": "query",
            "description": "Batch transfer ID to fetch the status",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_13"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_5"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1.2/getBatchTransferStatus?batchTransferId=test_batch_format_01' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Transfers} = cfSdk.Payouts;\n\nconst response = await Tranfers.GetBatchTransferStatus({\nbatchTransferId:Test_Bank_Account_Format_45\" \n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Transfers;\nimport com.cashfree.lib.domains.request.BatchTransferRequest;\nimport com.cashfree.lib.domains.request.RequestTransferRequest;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nTransfers transfer = new Transfers(payouts);\n\ntransfers.getBatchTransferStatus(\"javasdkbatch12\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.transfers import Transfers\n\nstatus = Transfers.get_batch_transfer_status(batchTransferId=\"Test_Bank_Account_Format_45\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1.2/requestAsyncTransfer": {
      "post": {
        "summary": "Standard Transfer Async v1.2",
        "description": "Use this API to initiate an amount transfer request at Cashfree by providing beneficiary id, amount, and transfer id. This is an async transfer request.",
        "operationId": "standard-transfer-async-v1-21",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_2_requestAsyncTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response indicating transfer initiation or error status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_22"
                },
                "examples": {
                  "TransferInitiated": {
                    "summary": "Transfer Accepted",
                    "value": {
                      "status": "ACCEPTED",
                      "subCode": "201",
                      "message": "Transfer Initiated",
                      "data": {
                        "referenceId": "107260"
                      }
                    }
                  },
                  "InvalidRemarksError": {
                    "summary": "Invalid Remarks",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Remarks is invalid"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X POST \\\n  'http://{{Host%20Url}}/payout/v1.2/requestAsyncTransfer' \\\n  -H 'Authorization: Bearer {{Token}}' \\\n  -d '{\n  \"beneId\": \"JOHN18011343\",\n  \"amount\": \"1.00\",\n  \"transferId\": \"JUNOB2018\"\n}'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/requestBatchTransfer": {
      "post": {
        "summary": "Batch Transfer V1.2",
        "description": "Use this API to create transfers to multiple beneficiaries. This API accepts an array of transfer objects under the batch field.",
        "operationId": "batch-transfer-v1-21",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_2_requestBatchTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Batch Transfer requested successfully. Please check later for processing status.",
                      "data": {
                        "referenceId": 486
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "409": {
            "description": "409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_409_3"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_5"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request POST 'http://gamma.cashfree.com/payoutapi/v1.2/requestBatchTransfer' \\\n--header 'Authorization: Bearer jMGNkI6ICZJRn1jvUGXUbN69t' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"batchTransferId\":\"batch_req_21\",\n    \"batchFormat\":\"BANK_ACCOUNT\",\n    \"deleteBene\": 0,\n    \"batch\": [\n        {\n            \"transferId\":\"TransferID1\",\n            \"amount\":\"10\",\n            \"bankAccount\":\"7766666351004\",\n            \"ifsc\":\"YESB0000001\",\n            \"phone\":\"9999999998\",\n            \"email\":\"test@gmail.com\",\n            \"name\": \"Transfer1\"\n        },\n{\n            \"transferId\":\"TransferID2\",\n            \"amount\":\"10\",\n            \"bankAccount\":\"7766666351004\",\n            \"ifsc\":\"YESB0000001\",\n            \"phone\":\"9999999998\",\n            \"email\":\"test@gmail.com\",\n            \"name\": \"Transfer2\"\n        }\n    ],\n    \"paymentInstrumentId\":\"IBL_CONNECTED\"\n}'\n\n\n"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/getTransferStatus": {
      "get": {
        "summary": "Get Transfer Status V1.2",
        "description": "Use these details to get details of a particular transfer. You can pass referenceId or transferId to fetch the details.",
        "operationId": "get-transfer-status-v1-21",
        "parameters": [
          {
            "name": "referenceId",
            "in": "query",
            "description": "Reference ID of the transaction. (Either referenceId or transferId is mandatory)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transferId",
            "in": "query",
            "description": "Transfer ID of the transaction.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_6"
                },
                "examples": {
                  "InvalidTransferId": {
                    "summary": "Invalid transferId",
                    "value": {
                      "status": "ERROR",
                      "subCode": "404",
                      "message": "transferId is invalid or does not exist"
                    }
                  },
                  "InvalidReferenceId": {
                    "summary": "Invalid referenceId",
                    "value": {
                      "status": "ERROR",
                      "subCode": "404",
                      "message": "referenceId is invalid or does not exist"
                    }
                  }
                }
              }
            }
          },
          "2XX": {
            "description": "Transfer details for different statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_2XX"
                },
                "examples": {
                  "TransferSuccessful": {
                    "summary": "Transfer successful",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 23457200",
                      "data": {
                        "transfer": {
                          "transferId": "javasdktesttransferid120793",
                          "bankAccount": 7766671501729,
                          "ifsc": "SBIN0000003",
                          "beneId": "johndoevalid983",
                          "amount": "1",
                          "status": "SUCCESS",
                          "utr": "0470445059841910",
                          "addedOn": "2021-11-24T13:39:25.000Z",
                          "processedOn": "2021-11-24T13:40:27.000Z",
                          "transferMode": "BANK",
                          "acknowledged": 1,
                          "phone": "9876543210",
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  },
                  "TransferPending": {
                    "summary": "Transfer pending",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 403010",
                      "data": {
                        "transfer": {
                          "transferId": "test_transfer12",
                          "bankAccount": 1059323929,
                          "ifsc": "HDFC0000077",
                          "beneId": 72210855581636420000,
                          "amount": "20",
                          "status": "PENDING",
                          "addedOn": "2021-11-15T17:20:30.000Z",
                          "processedOn": "2021-11-15T17:20:30.000Z",
                          "transferMode": "BANK",
                          "acknowledged": 0,
                          "phone": "7221085558",
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  },
                  "TransferFailed": {
                    "summary": "Transfer failed",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 411914",
                      "data": {
                        "transfer": {
                          "transferId": "async_test_869",
                          "beneId": "",
                          "amount": "1",
                          "status": "FAILED",
                          "addedOn": "2021-11-22T13:43:04.000Z",
                          "processedOn": "2021-11-22T13:43:05.000Z",
                          "reason": "INVALID_ACCOUNT_FAIL",
                          "transferMode": "PAYTM",
                          "acknowledged": 0,
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  },
                  "TransferRejected": {
                    "summary": "Transfer rejected",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 23457123",
                      "data": {
                        "transfer": {
                          "transferId": "transfer_13",
                          "beneId": "",
                          "amount": "4.56",
                          "status": "REJECTED",
                          "addedOn": "2021-11-24T11:18:44.000Z",
                          "processedOn": "2021-11-24T11:18:44.000Z",
                          "reason": "BENEFICIARY_NOT_EXIST",
                          "transferMode": "BANK",
                          "acknowledged": 0,
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  },
                  "TransferReversed": {
                    "summary": "Transfer reversed",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 403239",
                      "data": {
                        "transfer": {
                          "transferId": "test_transfer26",
                          "bankAccount": "02014457596969",
                          "ifsc": "CITI0000001",
                          "beneId": 75036302671636550000,
                          "amount": "3",
                          "status": "REVERSED",
                          "utr": "1637055017373632",
                          "addedOn": "2021-11-16T15:00:17.000Z",
                          "processedOn": "2021-11-16T15:01:17.000Z",
                          "reason": "ANY_OTHER_REASON",
                          "transferMode": "BANK",
                          "acknowledged": 0,
                          "phone": "7503630267",
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  },
                  "TransferReceived": {
                    "summary": "Transfer received",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Details of transfer with referenceId 402310",
                      "data": {
                        "transfer": {
                          "transferId": "transferBaas9899",
                          "beneId": "",
                          "amount": "1",
                          "status": "RECEIVED",
                          "addedOn": "2021-11-11T16:07:43.000Z",
                          "processedOn": "1899-11-30T00:00:00.000Z",
                          "transferMode": "BANK",
                          "acknowledged": 0,
                          "paymentInstrumentId": "CASHFREE_1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request GET 'http://localhost:9188/payout/v1.2/getTransferStatus?transferId=Sample_test' \\\n--header 'Authorization: Bearer {{Token}}' \\\n--header 'Content-Type: application/json'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/getBalance": {
      "get": {
        "summary": "Get Balance V1.2",
        "description": "Use this API to get the ledger balance and available balance of your account. Available balance is ledger balance minus the sum of all pending transfers (transfers triggered and processing or pending now).",
        "operationId": "get-balance-v1-21",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentInstrumentId",
            "in": "query",
            "description": "Specify the fund source ID from where you want the amount to be debited.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_5"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  https://{{Host%20Url}}payout/v1.2/getBalance \\\n  -H 'Authorization: Bearer {{Token}}\\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst response = await cfSdk.Payouts.GetBalance();",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\npayouts.getBalance();\n\n}\n"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts.transfers import Transfers\nb = Transfers.get_balance() "
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/incidents": {
      "get": {
        "summary": "Get Incidents",
        "description": "Use this API to get the list of incidents on banks(Resolved,Unresolved,All) for a given time range.",
        "operationId": "get-incident",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Incident status - RESOLVED/UNRESOLVED/ALL are the allowed values Default value is UNRESOLVED if not provided",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime string",
            "in": "query",
            "description": "Start Time for the desired period. Format yyyy-mm-dd hh:mm:ss",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime string",
            "in": "query",
            "description": "End Time for the desired period. Format yyyy-mm-dd hh:mm:ss. Default values are current day start Time(00:00:00) and end Time(23:59:59) if not provided.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityCode string",
            "in": "query",
            "description": "Code for the entity(BANK) on which the incidents are created.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_14"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_6"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\ {{{{Host%20Url}}/payout/v1/incidents?status=ALL&startTime=2022-01-01%2000:00:00&endTime=2022-01-05%2023:59:59&entityCode=CIUB \\ \n-H 'Authorization: Bearer {{Token>}}'\\"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/directTransfer": {
      "post": {
        "summary": "Direct Transfer V1.2",
        "description": "Use this API to initiate amount transfers directly to the beneficiary account via a bank transfer or UPI. You can add the beneficiary details in the same API request.",
        "operationId": "direct-transfer-v1-21",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_2_directTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 - Transfer Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                },
                "examples": {
                  "Pending": {
                    "summary": "Transfer Pending",
                    "value": {
                      "status": "PENDING",
                      "subCode": "201",
                      "message": "Transfer request pending at the bank",
                      "data": {
                        "referenceId": "23457526",
                        "utr": "",
                        "acknowledged": 0
                      }
                    }
                  },
                  "Success": {
                    "summary": "Transfer Successful",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "Transfer completed successfully",
                      "data": {
                        "referenceId": "10023",
                        "utr": "P16111765023806",
                        "acknowledged": 1
                      }
                    }
                  },
                  "Error": {
                    "summary": "Transfer ID Error",
                    "value": {
                      "status": "ERROR",
                      "subCode": "400",
                      "message": "Transfer Id already exists"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request POST 'http://{{Host%20Url}}/payout/v1.2/directTransfer' \\\n-H 'Authorization: Bearer {{Token}}'\n--header 'Content-Type: application/json' \\\n--data-raw '{\n \"amount\": \"20.00\",\n \"transferId\": \"JUNOB201814n009\",\n \"transferMode\": \"neft\",\n \"remarks\": \"test\",\n \"beneDetails\" : {\n     \"bankAccount\": \"026291800001191\",\n     \"ifsc\": \"YESB0000262\",\n     \"name\": \"Ranjiths\",\n     \"email\": \"ranjiths@cashfree.com\",\n     \"phone\": \"9999999999\",\n     \"address1\": \"any_dummy_value\"\n },\n \"paymentInstrumentId\": \"YESB_CONNECTED\"\n }'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/cardpay": {
      "post": {
        "summary": "CardPay",
        "description": "Use this API to transfer money to beneficiary cards. Provide details such as beneficiary name, card type, network type, and transfer ID.\n\nYou need to pass the tokenised card number or card token for this transfer.",
        "operationId": "card-payment1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Auth Token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_cardpay_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_15"
                }
              }
            }
          },
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403_2"
                },
                "examples": {
                  "Case1": {
                    "summary": "Invalid Token",
                    "value": {
                      "status": "ERROR",
                      "subCode": "403",
                      "message": "Token is not valid"
                    }
                  },
                  "Case2": {
                    "summary": "APIs Not Enabled",
                    "value": {
                      "status": "ERROR",
                      "subCode": "403",
                      "message": "APIs not enabled. Please fill out the [Support Form](https://merchant.cashfree.com/merchants/landing?env=prod&raise_issue=1)"
                    }
                  }
                }
              }
            }
          },
          "412": {
            "description": "412",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_412_1"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_8"
                },
                "examples": {
                  "case1": {
                    "summary": "Provide valid token",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Please provide valid token details."
                    }
                  },
                  "case2": {
                    "summary": "Amount should be at least 1.0",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Amount should be at least 1.0"
                    }
                  },
                  "case3": {
                    "summary": "Invalid bank account number or IFSC provided",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Invalid bank account number or IFSC provided"
                    }
                  },
                  "case4": {
                    "summary": "Please provide a valid Name",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Please provide a valid Name."
                    }
                  },
                  "case5": {
                    "summary": "Please provide a valid networkType",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Please provide a valid networkType."
                    }
                  },
                  "case6": {
                    "summary": "CardType is invalid",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "CardType is invalid."
                    }
                  },
                  "case7": {
                    "summary": "Transfer ID Validation",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "TransferId can contain only alphabets, numbers, hyphen, and underscore."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location --request POST 'https://payout-api.cashfree.com/payout/v1/cardpay' \\\n--header 'Authorization: Bearer JRoaAaJdFUVMvEByHAj' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"token\": \"4640837720072836\", \n    \"amount\": 1.2,\n    \"transferId\": \"cardpay_11\",\n    \"remarks\": \"Transfer to card\",\n    \"name\": \"John Doe\",\n    \"networkType\": \"VISA\",\n    \"tokenExpiry\" : \"2026-07\",\n    \"cardType\" : \"CREDIT\"\n}'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1/getBatchTransferStatus": {
      "get": {
        "summary": "Get Batch Transfer Status",
        "description": "Use this API to get the status of the Batch Transfer.",
        "operationId": "get-batch-transfer-status",
        "parameters": [
          {
            "name": "batchTransferId",
            "in": "query",
            "description": "It is the unique ID created for the batch transfer.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_5"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/getBatchTransferStatus?batchTransferId=test_batch_format_01' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Transfers} = cfSdk.Payouts;\n\nconst response = await Tranfers.GetBatchTransferStatus({\nbatchTransferId:Test_Bank_Account_Format_45\" \n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Transfers;\nimport com.cashfree.lib.domains.request.BatchTransferRequest;\nimport com.cashfree.lib.domains.request.RequestTransferRequest;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nTransfers transfer = new Transfers(payouts);\n\ntransfers.getBatchTransferStatus(\"javasdkbatch12\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.transfers import Transfers\n\nstatus = Transfers.get_batch_transfer_status(batchTransferId=\"Test_Bank_Account_Format_45\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1.3/getBatchTransferStatus": {
      "get": {
        "summary": "Get Batch Transfer Status",
        "description": "Use this API to get the status of the Batch Transfer.",
        "operationId": "get-batch-transfer-status-v-1-3",
        "parameters": [
          {
            "name": "batchTransferId",
            "in": "query",
            "description": "It is the unique ID created for the batch transfer.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_5"
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403_1"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl -X GET \\\n  'http://{{Host%20Url}}/payout/v1/getBatchTransferStatus?batchTransferId=test_batch_format_01' \\\n  -H 'Authorization: Bearer {{Token}}' \\"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst {Transfers} = cfSdk.Payouts;\n\nconst response = await Tranfers.GetBatchTransferStatus({\nbatchTransferId:Test_Bank_Account_Format_45\" \n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\nimport com.cashfree.lib.clients.Transfers;\nimport com.cashfree.lib.domains.request.BatchTransferRequest;\nimport com.cashfree.lib.domains.request.RequestTransferRequest;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\nTransfers transfer = new Transfers(payouts);\n\ntransfers.getBatchTransferStatus(\"javasdkbatch12\");\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts import Payouts\nfrom cashfree_sdk.payouts.transfers import Transfers\n\nstatus = Transfers.get_batch_transfer_status(batchTransferId=\"Test_Bank_Account_Format_45\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    },
    "/payout/v1/lend": {
      "post": {
        "summary": "Lend",
        "description": "Use this API to send requests for loan disbursement to the beneficiary. The service charges are pooled for the respective party and disbursed at the end of day. Disbursement amount = (Amount - total service charges).",
        "operationId": "lend1",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Auth Token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_lend_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_17"
                }
              }
            }
          },
          "201": {
            "description": "201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201_1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400_1"
                },
                "examples": {
                  "Case1": {
                    "summary": "Insufficient Balance",
                    "value": {
                      "status": "ERROR",
                      "subCode": "400",
                      "message": "Insufficient balance in LENDER fundsource"
                    }
                  },
                  "Case2": {
                    "summary": "Service Charge Error",
                    "value": {
                      "status": "ERROR",
                      "subCode": "400",
                      "message": "Total service charge is greater than disbursal amount"
                    }
                  },
                  "Case3": {
                    "summary": "Missing Beneficiary Details",
                    "value": {
                      "status": "ERROR",
                      "subCode": "400",
                      "message": "beneId is missing in the request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_403"
                }
              }
            }
          },
          "422": {
            "description": "422",
            "content": {
              "text/plain": {
                "examples": {
                  "Failed transfer": {
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Invalid bank account number of ifsc provided"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location 'https://payout-api.cashfree.com/payout/v1/lend\n--header 'Authorization: Bearer ab9JCVXpkI6ICc5RnIsICN4MzUIJiOicGbhJye.abQfigEVVF0XJBVQUV1TZFEUiojIiV3ciwSN2gjMwEDM4YTM6ICdhlmIsUjN0MDMxADO2EjOiAHelJCLxYTN2MzM6ICZJRnbldWYiwiIU5URSJVVD9FVV9UWBBlI6ICbl5mbhh2YiwiIUV1TZFEUiojI05WZnFmIsICO2EjL1QjL2AjMuUTMiojIwlmIsU2csFmZ6IyajVGaDVmc1RXYudWazJCLxYTN2MzM6ICZJRnb192YjFmIsIyRxwkTRVFN5oEMBV0QxEzUMFTQDdjMGNkI6ICZJRnbllGbjJye.abwcZDszdOc5abDkIGfFydq6Fsj5PK8jkKzdj563_7CAEiO8evP6osysTGnZtZp2_9' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"beneId\":\"bene1\",\n    \"loanId\":\"laon1\",\n    \"amount\":\"1000\",\n    \"transferMode\":\"imps\",\n    \"serviceCharges\":[{\"origin1\":\"something\", \"value\":\"50\"}]\n}\n    // \"beneDetails\":{\n    //     \"name\":Test,\n    //     \"email\":\"test@cashfree.com\",\n    //     \"phone\":\"8765434569\",\n    //     \"address1\":\"xyz\",\n    //     \"vpa\":\"success@upi\"\n    // }'"
            }
          ],
          "samples-languages": [
            "curl"
          ]
        }
      }
    },
    "/payout/v1.2/internalTransfer": {
      "post": {
        "summary": "Internal Transfer V1.2",
        "description": "Use this API to request an internal transfer. It is useful for accounts with multiple fund sources. You need to provide either the rechargeAccount or paymentInstrumentId and toPaymentInstrumentId along with the amount.",
        "operationId": "internal-transfer-v-12",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer auth token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "application/json",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1_2_internalTransfer_body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_23"
                },
                "examples": {
                  "Result": {
                    "summary": "Successful Transfer Response",
                    "value": {
                      "status": "SUCCESS",
                      "subCode": "200",
                      "message": "RefId-testingw123/some remarks-Internal Fund Transfer",
                      "data": {
                        "transferId": "123"
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_422_9"
                },
                "examples": {
                  "Case1": {
                    "summary": "Missing Mandatory Parameter",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Either one of rechargeAccount or (toPaymentInstrumentId and paymentInstrumentId) should be provided in the request"
                    }
                  },
                  "Case2": {
                    "summary": "Payment Instrument ID Unavailable",
                    "value": {
                      "status": "ERROR",
                      "subCode": "422",
                      "message": "Specified paymentInstrumentId not available."
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "curl",
              "code": "curl --location 'http://{{Host%20Url}}/payout/v1.2/internalTransfer’ \\\n--header 'Authorization: Bearer ab9JCVXpkI6ICc5RnIsICN4MzUIJiOicGbhJye.abQfigEVVF0XJBVQUV1TZFEUiojIiV3ciwSN4ADO1MTN4YTM6ICdhlmIsUDO2gTNzUDO2EjOiAHelJCLiIiOiQWarJCLxYTN2MzM6ICZJRnbldWYiwiIU5URSJVVD9FVV9UWBBlI6ICbl5mbhh2YiwiIUV1TZFEUiojI05WZnFmIsICO2EjL1QjL2AjMuUTMiojIwlmIsU2csFmZ6IyajVGaDVmc1RXYudWazJCLxYTN2MzM6ICZJRnb192YjFmIsICMHl0UPl0MBJjV2AzNRdzSW1ESDdjMGNkI6ICZJRnbllGbjJye.abvSnMtDnpmMehabn5R5VG3eEvNmbcBXDgT-u4LF27TqFnpNSOW0b0Y674hHJJN1sc' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"toPaymentInstrumentId\": \"COLENDING_WALLET_336561_8888981\",\n    \"paymentInstrumentId\": \"COLENDING_WALLET_336561_8888982\",\n    \"amount\": 1.26,\n    \"remarks\" : \"some remarks\",\n    \"transferId\" : \"testingw123\"\n}'"
            },
            {
              "language": "text",
              "code": "const cfSdk = require('cashfree-sdk');\nconst response = await cfSdk.Payouts.InternalTransfer({\n    amount: 1.1,\n    rechargeAccount: \"492372992\"\n});",
              "name": "Node"
            },
            {
              "language": "java",
              "code": "import com.cashfree.lib.clients.Payouts;\n\npublic static void main(){\n\nPayouts payouts = Payouts.getInstance(\n    Environment.PRODUCTION, \"<client_id>\", \"<client_secret>\");\npayouts.init();\n\npayouts.internalTransfer();\n\n}"
            },
            {
              "language": "python",
              "code": "from cashfree_sdk.payouts.transfers import Transfers\ntransfer = Transfers.internal_transfer(amount=1.1, rechargeAccuont=\"492372992\")"
            }
          ],
          "samples-languages": [
            "curl",
            "text",
            "java",
            "python"
          ]
        }
      }
    }
  },
  "components": {
    "schemas": {
      "inline_response_422_4": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Permission Denied"
          }
        }
      },
      "inline_response_403_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "403"
          },
          "message": {
            "type": "string",
            "example": "Token is not valid"
          }
        }
      },
      "inline_response_422_3": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Please provide a valid beneId"
          }
        }
      },
      "inline_response_422_6": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "startTime should be less than or equal to EndTime"
          }
        }
      },
      "inline_response_422_5": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Specified paymentInstrumentId not available."
          }
        }
      },
      "inline_response_422_7": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Please provide a valid batchTransferId"
          }
        }
      },
      "inline_response_200_16_data": {
        "type": "object",
        "properties": {
          "rowCount": {
            "type": "integer",
            "example": 2,
            "default": 0
          },
          "referenceId": {
            "type": "integer",
            "example": 1582,
            "default": 0
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_13_data_transfers"
            }
          }
        }
      },
      "inline_response_409_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "409"
          },
          "message": {
            "type": "string",
            "example": "Cashgram with id JOHaN10 already exists"
          }
        }
      },
      "inline_response_200_5_data": {
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "example": "JOHN18011"
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "groupName": {
            "type": "string",
            "example": "DEFAULT"
          },
          "email": {
            "type": "string",
            "example": "johndoe@cashfree.com"
          },
          "phone": {
            "type": "string",
            "example": "9876543210"
          },
          "address1": {
            "type": "string",
            "example": "ABCavenue"
          },
          "address2": {
            "type": "string",
            "example": ""
          },
          "city": {
            "type": "string",
            "example": "Bangalore"
          },
          "state": {
            "type": "string",
            "example": "Karnataka"
          },
          "pincode": {
            "type": "string",
            "example": "0"
          },
          "bankAccount": {
            "type": "string",
            "example": "00001111222233"
          },
          "ifsc": {
            "type": "string",
            "example": "HDFC0000001"
          },
          "status": {
            "type": "string",
            "example": "VERIFIED"
          }
        }
      },
      "v1_internalTransfer_body": {
        "required": [
          "amount",
          "rechargeAccount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Number (>=1)",
            "format": "float"
          },
          "rechargeAccount": {
            "type": "string",
            "description": "Cashfree internal recharge account number. Alphanumeric allowed"
          },
          "transferId": {
            "type": "string",
            "description": "A unique ID to identify this transfer. Alphanumeric, hyphen and underscore (_) allowed (40 character limit). If the value is not passed, the id will be autogenerated."
          }
        }
      },
      "inline_response_409_3": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "409"
          },
          "message": {
            "type": "string",
            "example": "Batch TransferId batch_req_21 already exists"
          }
        }
      },
      "inline_response_409_2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "409"
          },
          "message": {
            "type": "string",
            "example": "Batch TransferId abc-12356 already exists"
          }
        }
      },
      "v1_deactivateCashgram_body": {
        "required": [
          "cashgramId"
        ],
        "type": "object",
        "properties": {
          "cashgramId": {
            "type": "string",
            "description": "ID of the Cashgram to be deactivated. Alphanumeric and underscore (_) allowed (35 character limit)"
          }
        }
      },
      "v1_2_requestTransfer_body": {
        "required": [
          "amount",
          "beneId",
          "transferId"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Beneficiary Id. Alphanumeric characters allowed."
          },
          "amount": {
            "type": "number",
            "description": "amount to be transferred. Decimals allowed (>= 1.00)",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "paymentInstrumentId": {
            "type": "string",
            "description": "Specify the fund source ID from where you want the amount to be debited."
          },
          "remarks": {
            "type": "string",
            "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit)."
          }
        }
      },
      "v1_2_requestAsyncTransfer_body": {
        "required": [
          "amount",
          "beneId",
          "transferId"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Beneficiary ID. Alphanumeric characters allowed."
          },
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Decimal allowed (>= 1.00)",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "paymentInstrumentId": {
            "type": "string",
            "description": "Specify the fund source ID from where you want the amount to be debited."
          },
          "remarks": {
            "type": "string",
            "description": "Additional remarks, if any. alphanumeric and white spaces allowed (70 characters limit)"
          }
        }
      },
      "v1_cardpay_body": {
        "required": [
          "amount",
          "cardType",
          "token",
          "transferId"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "It is the tokenised card number or card token for this transfer."
          },
          "amount": {
            "type": "string",
            "description": "Amount you want to transfer. Amount should be >= 1.00. Decimals are allowed."
          },
          "transferId": {
            "type": "string",
            "description": "Unique transfer ID to identify the transfer. Alphanumeric characters and underscore are allowed. The maximum character limit is 40."
          },
          "remarks": {
            "type": "string",
            "description": "Remarks for your reference. Alphanumeric characters and whitespace are allowed. The maximum character limit is 70."
          },
          "name": {
            "type": "string",
            "description": "The name of the beneficiary who receives the transfer amount."
          },
          "networkType": {
            "type": "string",
            "description": "Specify the card type - VISA/MASTERCARD."
          },
          "cryptogram": {
            "type": "string",
            "description": "It ​contains formatted chip/cryptogram data relating to the token cryptogram. The maximum character limit is 600. It is optional for MASTERCARD and not required for VISA."
          },
          "tokenExpiry": {
            "type": "string",
            "description": "Applicable only for MASTERCARD. The format for the valid token expiry date should be YYYY-MM. It cannot be null. Provide a valid tokenExpiry if collected from the customers. If unavailable, populate a static value with a forward year and month in the correct format (YYYY-MM). The maximum character limit is 10."
          },
          "cardType": {
            "type": "string",
            "description": "Specify if it is a debit or credit card. Values allowed: DEBIT/CREDIT. CREDIT is the default value if the parameter does not exist or is not specified."
          },
          "tokenPANSequenceNumber": {
            "type": "string",
            "description": "A maximum of 3 alphanumeric characters are allowed. It is optional for MASTERCARD and not required for VISA."
          }
        }
      },
      "inline_response_200_7_data_transfers": {
        "type": "object",
        "properties": {
          "transferDate": {
            "type": "string",
            "example": "2020-06-16T00:00:00.000Z"
          },
          "amount": {
            "type": "string",
            "example": "1"
          },
          "mode": {
            "type": "string",
            "example": "IMPS"
          },
          "beneId": {
            "type": "string",
            "example": "John Doe"
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          }
        }
      },
      "inline_response_200_13_data_transfers": {
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "example": "999999999918875"
          },
          "transferId": {
            "type": "string",
            "example": "PTM_00121241112"
          },
          "referenceId": {
            "type": "integer",
            "example": 1523969542,
            "default": 0
          },
          "bankAccount": {
            "type": "string",
            "example": "9999999999"
          },
          "ifsc": {
            "type": "string",
            "example": "PYTM0000001"
          },
          "amount": {
            "type": "string",
            "example": "12.00"
          },
          "remarks": {
            "type": "string",
            "example": ""
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "utr": {
            "type": "string",
            "example": "W1532082925"
          },
          "addedOn": {
            "type": "string",
            "example": "2018-07-20T00:00:00.000Z"
          },
          "processedOn": {
            "type": "string",
            "example": "2018-07-20T00:00:00.000Z"
          }
        }
      },
      "inline_response_200_11_data": {
        "type": "object",
        "properties": {
          "cashgramStatus": {
            "type": "string",
            "example": "ACTIVE"
          },
          "referenceId": {
            "type": "integer",
            "example": 123456,
            "default": 0
          },
          "cashgramId": {
            "type": "string",
            "example": "JOHaN10"
          },
          "cashgramLink": {
            "type": "string",
            "example": "http://csgr.am/abcdefg"
          }
        }
      },
      "payoutv1directTransfer_beneDetails": {
        "required": [
          "address1",
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "bankAccount": {
            "type": "string",
            "description": "Beneficiary bank account (9 - 18 alphanumeric character limit) (Required in case of banktransfer, imps, neft mode)"
          },
          "ifsc": {
            "type": "string",
            "description": "Accounts IFSC (standard IFSC format) - length 11, first four bank IFSC and 5th digit 0 (Required in case of banktransfer, imps, neft mode)"
          },
          "name": {
            "type": "string",
            "description": "Beneficiary name, only alphabets and white space (100 character limit)"
          },
          "phone": {
            "type": "string",
            "description": "Beneficiary phone number, phone number registered in India (only digits, 8 - 12 characters after stripping +91)"
          },
          "email": {
            "type": "string",
            "description": "Beneficiary email address, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)"
          },
          "vpa": {
            "type": "string",
            "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore () allowed (100 character limit). Note: underscore () and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@) (Required in case of UPI)"
          },
          "address1": {
            "type": "string",
            "description": "Beneficiary address. Alphanumeric characters and space allowed (150 character limit)."
          }
        },
        "description": "Object with the beneficiary details to whom amount is to be transferred"
      },
      "inline_response_422_2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Remarks is invalid"
          }
        }
      },
      "inline_response_422": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Please provide a valid Bank IFSC code."
          }
        }
      },
      "inline_response_422_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Account not configured. Please reach out to accoount manager"
          }
        }
      },
      "inline_response_200_9": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Cashgram with id - JOHaN10 successfully deactivated!"
          }
        }
      },
      "inline_response_200_5": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Details of beneficiary"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_5_data"
          }
        }
      },
      "inline_response_200_6": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ACCEPTED"
          },
          "subCode": {
            "type": "string",
            "example": "201"
          },
          "message": {
            "type": "string",
            "example": "Transfer Initiated"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_6_data"
          }
        }
      },
      "inline_response_200_7": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_7_data"
          }
        }
      },
      "inline_response_200_8": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Cashgram Created"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_8_data"
          }
        }
      },
      "inline_response_200_6_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "107260"
          }
        }
      },
      "inline_response_200_3_data": {
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "example": "JOHN18011"
          }
        }
      },
      "v1_lend_body": {
        "required": [
          "amount",
          "beneId",
          "loanId",
          "transferMode"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "It is the unique ID to identify the beneficiary. Only alphanumeric characters are allowed."
          },
          "loanId": {
            "type": "string",
            "description": "It is the unique ID to identify the loan. Only alphanumeric characters are allowed."
          },
          "amount": {
            "type": "string",
            "description": "It is the loan amount. It should be equal to or greater than 1.00."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "serviceCharges": {
            "type": "string",
            "description": "It is the service charges that need to be disbursed to different parties.",
            "default": "[{\"key\":\"\", \"value\":\"\"}]"
          },
          "beneDetails": {
            "$ref": "#/components/schemas/payoutv1lend_beneDetails"
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Ledger balance for the account"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_1_data"
          }
        }
      },
      "inline_response_200_2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "example": "Request submitted successfully. Withdrawal Id : W55"
          },
          "statusCode": {
            "type": "string",
            "example": "200"
          }
        }
      },
      "inline_response_200_3": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "beneId retrieved successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_3_data"
          }
        }
      },
      "inline_response_200_4": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Beneficiary removed"
          }
        }
      },
      "v1_selfWithdrawal_body": {
        "required": [
          "amount",
          "withdrawalId"
        ],
        "type": "object",
        "properties": {
          "withdrawalId": {
            "type": "string",
            "description": "Unique identifier for the withdrawal, alphanumeric allowed (50 character limit)"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be withdrawn, decimal (>= 1.00)",
            "format": "float"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks, if any. Alphanumeric and white space (70 character limit)"
          }
        }
      },
      "v1_directTransfer_body": {
        "required": [
          "amount",
          "beneDetails",
          "transferId",
          "transferMode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Amount should be greater that INR 1.00. Decimals are allowed.",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique ID to identify this transfer. Alphanumeric characters and underscores are allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "beneDetails": {
            "$ref": "#/components/schemas/payoutv1directTransfer_beneDetails"
          }
        }
      },
      "inline_response_412_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "412"
          },
          "message": {
            "type": "string",
            "example": "Not enough available balance in the account"
          }
        }
      },
      "inline_response_200_13_data": {
        "type": "object",
        "properties": {
          "rowCount": {
            "type": "integer",
            "example": 2,
            "default": 0
          },
          "referenceId": {
            "type": "integer",
            "example": 1582,
            "default": 0
          },
          "paymentInstrumentId": {
            "type": "string",
            "example": "CASHFREE_1"
          },
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_13_data_transfers"
            }
          }
        }
      },
      "payoutv1lend_beneDetails": {
        "type": "object",
        "properties": {
          "bankAccount": {
            "type": "string",
            "description": "It is the bank account of the beneficiary. It must be between 9-18 alphanumeric characters. It is a required parameter in the case of banktransfer, imps, and neft."
          },
          "ifsc": {
            "type": "string",
            "description": "The IFSC information of the bank account of the dealer/distributor who raised the invoice for the customer to pay. It should be an alphanumeric value of 11 characters. The first 4 characters should be alphabets, the 5th character should be a 0, and the remaining 6 characters should be numerals."
          },
          "name": {
            "type": "string",
            "description": "It is the name of the beneficiary. It should be a maximum of 100 characters. Only alphabets and whitespaces (  ) are allowed."
          },
          "phone": {
            "type": "string",
            "description": "It is the phone number of the beneficiary. The phone number must be registered in India. Only numeric values are allowed. It should be between 8 and 12 characters excluding +91."
          },
          "email": {
            "type": "string",
            "description": "It is the email address of the beneficiary. A maximum of 200 characters are allowed. The value should contain @ and period (.)."
          },
          "vpa": {
            "type": "string",
            "description": "It is the virtual payment address of the beneficiary. A maximum of 100 characters are allowed. Accepted values: alphanumeric, period (.), hyphen (-), at sign (@), underscore (_). Underscore (_) and period (.) are accepted before and after at sign (@). Hyphen (-) is accepted only before at sign (@)."
          },
          "address1": {
            "type": "string",
            "description": "It is the address of the beneficiary. A maximum of 150 characters are allowed. Only alphanumeric values and whitespaces ( ) are allowed."
          }
        },
        "description": "It is the details of the beneficiary."
      },
      "inline_response_200_11": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Cashgram details retrieved"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_11_data"
          }
        }
      },
      "inline_response_200_10": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Token is valid"
          }
        }
      },
      "inline_response_404_2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "Beneficiary does not exist"
          }
        }
      },
      "inline_response_200_13": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_13_data"
          }
        }
      },
      "inline_response_404_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "Beneficiary not found with given bank account details"
          }
        }
      },
      "inline_response_200_12": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "example": "Token is valid"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          }
        }
      },
      "v1_2_internalTransfer_body": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "rechargeAccount": {
            "type": "string",
            "description": "It is the Cashfree Payments' internal recharge account number. Alphanumeric characters are allowed."
          },
          "paymentInstrumentId": {
            "type": "string",
            "description": "It is the unique ID to identify the fund source from which you want to transfer the money. Alphanumeric characters are allowed."
          },
          "toPaymentInstrumentId": {
            "type": "string",
            "description": "It is the unique ID to identify the fund source where you want to deposit the money. Alphanumeric characters are allowed."
          },
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Number (>=1)",
            "format": "float"
          },
          "remarks": {
            "type": "string",
            "description": "Any remarks if required."
          },
          "transferId": {
            "type": "string",
            "description": "It is the unique ID to identify the transfer. Alphanumeric, hyphen (-), and underscore (_) characters are allowed. Maximum character limit is 40. The ID is auto-generated if the parameter is left blank."
          }
        }
      },
      "inline_response_404_4": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "Cashgram with id JOHaN10 does not exists"
          }
        }
      },
      "inline_response_404_3": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "referenceId is invalid or does not exist"
          }
        }
      },
      "inline_response_200_14_data_incidents": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 214711,
            "default": 0
          },
          "type": {
            "type": "string",
            "example": "BENEFICIARY"
          },
          "entity": {
            "type": "string",
            "example": "BANK"
          },
          "mode": {
            "type": "string",
            "example": "IMPS"
          },
          "createdAt": {
            "type": "string",
            "example": "2022-01-05T00:48:54.000Z"
          },
          "resolvedAt": {
            "type": "string",
            "example": "2022-01-05T00:53:24.000Z"
          },
          "isScheduled": {
            "type": "boolean",
            "example": false,
            "default": true
          },
          "isResolved": {
            "type": "boolean",
            "example": true,
            "default": true
          },
          "impact": {
            "type": "string",
            "example": "LOW"
          },
          "entityName": {
            "type": "string",
            "example": "City union bank"
          },
          "entityCode": {
            "type": "string",
            "example": "CIUB"
          }
        }
      },
      "inline_response_404_5": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "Batch Transfer Id does not exist"
          }
        }
      },
      "inline_response_200_8_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "integer",
            "example": 123456,
            "default": 0
          },
          "cashgramLink": {
            "type": "string",
            "example": "http://csgr.am/abcdefg"
          }
        }
      },
      "inline_response_200_15": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Transfer completed successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_15_data"
          }
        }
      },
      "inline_response_200_14": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "List of incidents retrieved"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_14_data"
          }
        }
      },
      "inline_response_200_17": {
        "oneOf": [
          {
            "title": "Success transfer for beneId",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "SUCCESS"
              },
              "subCode": {
                "type": "string",
                "example": "200"
              },
              "message": {
                "type": "string",
                "example": "Transfer completed successfully"
              },
              "data": {
                "$ref": "#/components/schemas/inline_response_200_17_data"
              }
            }
          },
          {
            "title": "Success transfer for beneDetails bank account",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "SUCCESS"
              },
              "subCode": {
                "type": "string",
                "example": "200"
              },
              "message": {
                "type": "string",
                "example": "Transfer completed successfully"
              },
              "data": {
                "$ref": "#/components/schemas/inline_response_200_17_data"
              }
            }
          },
          {
            "title": "Sucess transfer for beneDetails VPA",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "SUCCESS"
              },
              "subCode": {
                "type": "string",
                "example": "200"
              },
              "message": {
                "type": "string",
                "example": "Transfer completed successfully"
              },
              "data": {
                "$ref": "#/components/schemas/inline_response_200_17_data"
              }
            }
          }
        ]
      },
      "v1_requestAsyncTransfer_body": {
        "required": [
          "amount",
          "beneId",
          "transferId"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Beneficiary ID. Alphanumeric characters allowed."
          },
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Decimal allowed (>= 1.00)",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "remarks": {
            "type": "string",
            "description": "Additional remarks, if any. alphanumeric and white spaces allowed (70 characters limit)"
          }
        }
      },
      "inline_response_200_16": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Data retrieved successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_16_data"
          }
        }
      },
      "inline_response_200_1_data": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string",
            "example": "214735.50"
          },
          "availableBalance": {
            "type": "string",
            "example": "173980.50"
          }
        }
      },
      "inline_response_200_14_data": {
        "type": "object",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_14_data_incidents"
            }
          }
        }
      },
      "inline_response_201_1_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "54108317"
          },
          "utr": {
            "type": "string",
            "example": ""
          },
          "acknowledged": {
            "type": "integer",
            "example": 0,
            "default": 0
          }
        }
      },
      "v1_requestTransfer_body": {
        "required": [
          "amount",
          "beneId",
          "transferId"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Beneficiary Id. Alphanumeric characters allowed."
          },
          "amount": {
            "type": "number",
            "description": "amount to be transferred. Decimals allowed (>= 1.00)",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique Id to identify this transfer. Alphanumeric and underscore (_) allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "remarks": {
            "type": "string",
            "description": "Additional remarks, if any. Alphanumeric and white spaces allowed (70 characters limit)."
          }
        }
      },
      "inline_response_201": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "PENDING"
          },
          "subCode": {
            "type": "string",
            "example": "201"
          },
          "message": {
            "type": "string",
            "example": "Transfer request pending at the bank"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_201_data"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Beneficiary added successfully"
          }
        }
      },
      "inline_response_403": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "403"
          },
          "message": {
            "type": "string",
            "example": "APIs not enabled. Please fill out the [Support Form](https://merchant.cashfree.com/merchants/landing?env=prod&raise_issue=1)"
          }
        }
      },
      "inline_response_401": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "401"
          },
          "message": {
            "type": "string",
            "example": "Invalid clientId and clientSecret combination"
          }
        }
      },
      "v1_2_requestBatchTransfer_body": {
        "required": [
          "batch",
          "batchFormat",
          "batchTransferId"
        ],
        "type": "object",
        "properties": {
          "batchTransferId": {
            "type": "string",
            "description": "Unique Id of the Batch Transfer, alphanumeric and underscore allowed (60 character limit)"
          },
          "batchFormat": {
            "type": "string",
            "description": "Format of the batch transfers, valid values are, BENEFICIARY_ID, BANK_ACCOUNT, UPI, PAYTM, AMAZONPAY. Details are available below."
          },
          "deleteBene": {
            "type": "boolean",
            "description": "Flag to delete and read new beneficiaries if a beneficiary with the same Beneficiary Id is available. When the batch transfer format is BANK_ACCOUNT"
          },
          "batch": {
            "type": "array",
            "description": "An array of transfer objects",
            "items": {
              "type": "string"
            }
          },
          "paymentInstrumentId": {
            "type": "string",
            "description": "Specify the payment instrument from where you want the amount to be debited."
          }
        }
      },
      "inline_response_200_7_data": {
        "type": "object",
        "properties": {
          "transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inline_response_200_7_data_transfers"
            }
          }
        }
      },
      "inline_response_400": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "400"
          },
          "message": {
            "type": "string",
            "example": "Transfer Id already exists"
          }
        }
      },
      "inline_response_404": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "Recharge Account not found"
          }
        }
      },
      "inline_response_200_15_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "10023"
          },
          "utr": {
            "type": "string",
            "example": "P16111765023806"
          },
          "acknowledged": {
            "type": "integer",
            "example": 1,
            "default": 0
          }
        }
      },
      "inline_response_409": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "409"
          },
          "message": {
            "type": "string",
            "example": "Beneficiary Id already exists"
          }
        }
      },
      "v1_addBeneficiary_body": {
        "required": [
          "address1",
          "beneId",
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Unique Beneficiary ID to identify the beneficiary. Alphanumeric and underscore (_) allowed (50 character limit)"
          },
          "name": {
            "type": "string",
            "description": "It is the name of the beneficiary. A maximum of 100 characters are allowed. Alphabets, numbers, white spaces ( ), and special characters are allowed."
          },
          "email": {
            "type": "string",
            "description": "Beneficiaries email, string in email Id format (Ex: johndoe_1@cashfree.com) - should contain @ and dot (.) - (200 character limit)"
          },
          "phone": {
            "type": "string",
            "description": "Beneficiaries phone number, phone number registered in India (only digits, 8 - 12 characters after stripping +91)"
          },
          "bankAccount": {
            "type": "string",
            "description": "Beneficiary bank account (9 - 18 alphanumeric character limit)"
          },
          "ifsc": {
            "type": "string",
            "description": "Accounts IFSC (standard IFSC format) - length 11, first four bank IFSC and 5th digit 0"
          },
          "vpa": {
            "type": "string",
            "description": "Beneficiary VPA, alphanumeric, dot (.), hyphen (-), at sign (@), and underscore (_) allowed (100 character limit). Note: underscore (_) and dot (.) gets accepted before and after at sign (@), but hyphen (-) get only accepted before at sign (@)"
          },
          "address1": {
            "type": "string",
            "description": "Beneficiaries address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)"
          },
          "address2": {
            "type": "string",
            "description": "Beneficiary address, alphanumeric and space allowed (but script, HTML tags gets sanitized or removed) (150 character limit)"
          },
          "city": {
            "type": "string",
            "description": "Beneficiary city, only alphabets and white space (50 character limit)"
          },
          "state": {
            "type": "string",
            "description": "Beneficiary state, only alphabets and white space (50 character limit)"
          },
          "pincode": {
            "type": "string",
            "description": "Beneficiaries pincode, only numbers (6 character limit)"
          }
        }
      },
      "inline_response_200_17_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "54109311"
          },
          "utr": {
            "type": "string",
            "example": "1681409852019854"
          },
          "acknowledged": {
            "type": "integer",
            "example": 1,
            "default": 0
          }
        }
      },
      "v1_removeBeneficiary_body": {
        "required": [
          "beneId"
        ],
        "type": "object",
        "properties": {
          "beneId": {
            "type": "string",
            "description": "Beneficiaries Id to delete, alphanumeric and underscore allowed (50 character limit)"
          }
        }
      },
      "inline_response_201_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "PENDING"
          },
          "subCode": {
            "type": "string",
            "example": "201"
          },
          "message": {
            "type": "string",
            "example": "Transfer request pending at the bank"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_201_1_data"
          }
        }
      },
      "inline_response_201_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "23770604"
          },
          "utr": {
            "type": "string",
            "example": ""
          },
          "acknowledged": {
            "type": "integer",
            "example": 0,
            "default": 0
          }
        }
      },
      "v1_createCashgram_body": {
        "required": [
          "amount",
          "cashgramId",
          "linkExpiry",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "cashgramId": {
            "type": "string",
            "description": "Unique Id of the Cashgram. Alphanumeric, underscore (_), and hyphen (-) allowed (35 character limit)"
          },
          "amount": {
            "type": "number",
            "description": "Amount to be transferred, >= 1.00",
            "format": "float"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact"
          },
          "email": {
            "type": "string",
            "description": "Email of the contact"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the contact"
          },
          "linkExpiry": {
            "type": "string",
            "description": "Date to expire the cashgram link, Date format YYYY/MM/DD, maximum 30 days from the date of creation."
          },
          "remarks": {
            "type": "string",
            "description": "Specify remarks, if any."
          },
          "notifyCustomer": {
            "type": "boolean",
            "description": "If value is 1, a link is sent to customers phone and email."
          }
        }
      },
      "v1_2_directTransfer_body": {
        "required": [
          "amount",
          "beneDetails",
          "transferId",
          "transferMode"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount to be transferred. Amount should be greater that INR 1.00. Decimals are allowed.",
            "format": "float"
          },
          "transferId": {
            "type": "string",
            "description": "A unique ID to identify this transfer. Alphanumeric characters and underscores are allowed (40 character limit)."
          },
          "transferMode": {
            "type": "string",
            "description": "It is the mode of transfer. Allowed values are: banktransfer, neft, imps, rtgs, upi, paytm, and amazonpay. The default transferMode is banktransfer."
          },
          "beneDetails": {
            "$ref": "#/components/schemas/payoutv1directTransfer_beneDetails"
          },
          "paymentInstrumentId": {
            "type": "string",
            "description": "Specify the fund source ID from where you want the amount to be debited."
          }
        }
      },
      "inline_response_412": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "412"
          },
          "message": {
            "type": "string",
            "example": "Post data is empty or not a valid JSON"
          }
        }
      },
      "v1_requestBatchTransfer_body": {
        "required": [
          "batch",
          "batchFormat",
          "batchTransferId"
        ],
        "type": "object",
        "properties": {
          "batchTransferId": {
            "type": "string",
            "description": "Unique Id of the Batch Transfer, alphanumeric and underscore allowed (60 character limit)"
          },
          "batchFormat": {
            "type": "string",
            "description": "Format of the batch transfers, valid values are, BENEFICIARY_ID, BANK_ACCOUNT, UPI, PAYTM, AMAZONPAY. Details are available below."
          },
          "deleteBene": {
            "type": "boolean",
            "description": "Flag to delete and read new beneficiaries if a beneficiary with the same Beneficiary Id is available. When the batch transfer format is BANK_ACCOUNT"
          },
          "batch": {
            "type": "array",
            "description": "An array of transfer objects",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "inline_response_200_18": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "RefId-a0302c78d13142b89d85af472961901528/006291823001146-Internal Fund Transfer"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_18_data"
          }
        }
      },
      "inline_response_200_19": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Details of transfer with referenceId 200223467"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_19_data"
          }
        }
      },
      "inline_response_200_20": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Transfer completed successfully"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_20_data"
          }
        }
      },
      "inline_response_200_21": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "SUCCESS"
              },
              "subCode": {
                "type": "string",
                "example": "200"
              },
              "message": {
                "type": "string",
                "example": "Transfer completed successfully"
              },
              "data": {
                "$ref": "#/components/schemas/inline_response_200_20_data"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "ERROR"
              },
              "subCode": {
                "type": "string",
                "example": "404"
              },
              "message": {
                "type": "string",
                "example": "Beneficiary does not exist"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "ERROR"
              },
              "subCode": {
                "type": "string",
                "example": "422"
              },
              "message": {
                "type": "string",
                "example": "Remarks can have only numbers, alphabets, and whitespaces"
              }
            }
          }
        ]
      },
      "inline_response_200_22": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "ACCEPTED"
              },
              "subCode": {
                "type": "string",
                "example": "201"
              },
              "message": {
                "type": "string",
                "example": "Transfer Initiated"
              },
              "data": {
                "$ref": "#/components/schemas/inline_response_200_22_data"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "ERROR"
              },
              "subCode": {
                "type": "string",
                "example": "422"
              },
              "message": {
                "type": "string",
                "example": "Remarks is invalid"
              }
            }
          }
        ]
      },
      "inline_response_404_6": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "404"
          },
          "message": {
            "type": "string",
            "example": "transferId is invalid or does not exist"
          }
        }
      },
      "inline_response_2XX": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "Details of transfer with referenceId"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_2XX_data"
          }
        }
      },
      "inline_response_403_2": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "403"
          },
          "message": {
            "type": "string",
            "example": "Token is not valid"
          }
        }
      },
      "inline_response_422_8": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Please provide valid token details."
          }
        }
      },
      "inline_response_400_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "400"
          },
          "message": {
            "type": "string",
            "example": "Insufficient balance in LENDER fundsource"
          }
        }
      },
      "inline_response_200_23": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "subCode": {
            "type": "string",
            "example": "200"
          },
          "message": {
            "type": "string",
            "example": "RefId-testingw123/some remarks-Internal Fund Transfer"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_23_data"
          }
        }
      },
      "inline_response_422_9": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ERROR"
          },
          "subCode": {
            "type": "string",
            "example": "422"
          },
          "message": {
            "type": "string",
            "example": "Either one of rechargeAccount or (toPaymentInstrumentId and paymentInstrumentId) should be provided in the request"
          }
        }
      },
      "inline_response_200_18_data": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "example": "a0302c78d13142b89d85af472961901528"
          }
        }
      },
      "inline_response_200_19_data_transfer": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "example": "sample01139"
          },
          "bankAccount": {
            "type": "string",
            "example": "000810139000385"
          },
          "ifsc": {
            "type": "string",
            "example": "YESB0MAN001"
          },
          "beneId": {
            "type": "string",
            "example": "test_bene"
          },
          "amount": {
            "type": "string",
            "example": "1.2"
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "utr": {
            "type": "string",
            "example": "N351200478962883"
          },
          "addedOn": {
            "type": "string",
            "example": "2020-12-16T09:17:41.000Z"
          },
          "processedOn": {
            "type": "string",
            "example": "2020-12-16T09:17:42.000Z"
          },
          "transferMode": {
            "type": "string",
            "example": "BANK"
          },
          "acknowledged": {
            "type": "integer",
            "example": 1
          },
          "reason": {
            "type": "string",
            "example": "BENEFICIARY_BANK_OFFLINE"
          }
        }
      },
      "inline_response_200_19_data": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/inline_response_200_19_data_transfer"
          }
        }
      },
      "inline_response_200_20_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "10023"
          },
          "utr": {
            "type": "string",
            "example": "P16111765023806"
          },
          "acknowledged": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "inline_response_200_22_data": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "example": "107260"
          }
        }
      },
      "inline_response_2XX_data_transfer": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "example": "javasdktesttransferid120793"
          },
          "bankAccount": {
            "type": "string",
            "example": "7766671501729"
          },
          "ifsc": {
            "type": "string",
            "example": "SBIN0000003"
          },
          "beneId": {
            "type": "string",
            "example": "johndoevalid983"
          },
          "amount": {
            "type": "string",
            "example": "1"
          },
          "status": {
            "type": "string",
            "example": "SUCCESS"
          },
          "utr": {
            "type": "string",
            "example": "0470445059841910"
          },
          "addedOn": {
            "type": "string",
            "example": "2021-11-24T13:39:25.000Z"
          },
          "processedOn": {
            "type": "string",
            "example": "2021-11-24T13:40:27.000Z"
          },
          "transferMode": {
            "type": "string",
            "example": "BANK"
          },
          "acknowledged": {
            "type": "integer",
            "example": 1
          },
          "phone": {
            "type": "string",
            "example": "9876543210"
          },
          "paymentInstrumentId": {
            "type": "string",
            "example": "CASHFREE_1"
          }
        }
      },
      "inline_response_2XX_data": {
        "type": "object",
        "properties": {
          "transfer": {
            "$ref": "#/components/schemas/inline_response_2XX_data_transfer"
          }
        }
      },
      "inline_response_200_23_data": {
        "type": "object",
        "properties": {
          "transferId": {
            "type": "string",
            "example": "123"
          }
        }
      }
    },
    "securitySchemes": {}
  },
  "x-readme": {
    "headers": [],
    "explorer-enabled": false,
    "proxy-enabled": true
  },
  "x-readme-fauxas": true
}